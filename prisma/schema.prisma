generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Articles {
  id           String          @id @default(cuid())
  articleId    Int             @unique
  createdAt    DateTime
  articleTitle String
  articleLink  String
  votes        ArticlesVotes[]
}

model ArticlesVotes {
  id        String   @id @default(cuid())
  userId    String
  articleId String
  article   Articles @relation(fields: [articleId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Team {
  id              String       @id @default(cuid())
  name            String
  slug            String?      @unique
  score           Int?
  ownerId         String       @unique
  prs             String?
  githubTeamId    Int?
  allowAutoAssign Boolean
  disqualified    Boolean      @default(false)
  owner           User         @relation("owner", fields: [ownerId], references: [id])
  actionLogs      ActionLogs[] @relation("team")
  users           User[]

  @@index([slug])
  @@index([disqualified])
}

model ActionLogs {
  id         String     @id @default(cuid())
  createdAt  DateTime   @default(now())
  actionType ActionType
  pr         String?
  prDetails  String?
  userId     String?
  teamId     String?
  adminId    String
  admin      User       @relation("admin", fields: [adminId], references: [id])
  team       Team?      @relation("team", fields: [teamId], references: [id])
  user       User?      @relation("affectedUser", fields: [userId], references: [id])

  @@index([pr])
  @@index([prDetails])
  @@index([actionType])
  @@index([createdAt])
  @@index([teamId])
  @@index([adminId])
  @@index([userId])
}

model Report {
  pr     String @unique
  status Status

  @@index([status])
}

model Social {
  createdAt    DateTime    @default(now())
  id           String      @id @default(cuid())
  type         SocialMedia
  userId       String
  accessToken  String
  refreshToken String
  user         User        @relation(fields: [userId], references: [id])
}

model User {
  id              String          @id @default(cuid())
  name            String?
  email           String?         @unique
  handle          String?
  emailVerified   DateTime?
  image           String?
  cleaner         Boolean         @default(false)
  createdAt       DateTime        @default(now())
  disqualified    Boolean         @default(false)
  githubUserId    Int?
  inviteId        String?
  moderator       Boolean         @default(false)
  score           Int             @default(0)
  teamId          String?
  invite          User?           @relation("user", fields: [inviteId], references: [id])
  team            Team?           @relation(fields: [teamId], references: [id])
  accounts        Account[]
  adminActionLogs ActionLogs[]    @relation("admin")
  userActionLogs  ActionLogs[]    @relation("affectedUser")
  votes           ArticlesVotes[]
  sessions        Session[]
  social          Social[]
  teamOwner       Team?           @relation("owner")
  invited         User[]          @relation("user")
  winners         Winners[]
}

model Winners {
  id            String     @id @default(cuid())
  month         Int
  year          Int
  userId        String
  lastDateClaim DateTime
  type          WinnerType
  claimed       DateTime?
  user          User       @relation(fields: [userId], references: [id])

  @@unique([month, year, userId, type])
  @@index([month])
  @@index([year])
  @@index([userId])
  @@index([claimed])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Repositories {
    id            String    @id @default(cuid())
    date          DateTime
    status        RepositoryStatus
    url           String
    @@index([url])
    @@unique([url])
}

enum RepositoryStatus {
   NOT_DETERMINED
   ACCEPTED
   DENIED
   BANNED
}

enum ActionType {
  KICK_USER
  DELTE_PR
  RECOVER_PR
  DISQUALIFY_USER
  RECOVER_USER
  DISQUALITY_TEAM
  RECOVER_TEAM
}

enum WinnerType {
  EXTRA
  COMPETITION
  NOVU
}

enum SocialMedia {
  TWITTER
  DEVTO
}

enum Status {
  REPORT
  DELETED
}
